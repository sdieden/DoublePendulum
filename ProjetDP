# Projet_1:Double pendule

#from turtle import color
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import deque
np.seterr(all = 'raise')
from IPython.display import HTML, Image
from IPython import display

def test_jacobien():
    print(Jacobien(0.2,0.2828,1,2))
# Constantes du système
g = 9.81
m1 = 1
m2 = 1
l1 = 1
l2 = 1
tmax = 0.9
fps=60
k = 1/fps

L = l1+l2
history_len = 100  # how many trajectory points to display


#conditions initialles
th0_1 = np.pi/2
th0_2 = np.pi
p0_1 = 0
p0_2 = 0

#définition F
def thstar(th1, th2, p1, p2):
    c1 = (m2*l2**2*p1-m2*l1*l2*np.cos(th1-th2)*p2)/(m2*l1**2*l2**2*(m1+m2*(np.sin(th1-th2))**2))
    c2 = ((m1+m2)*l1**2*p2-m2*l1*l2*np.cos(th1-th2)*p1)/(m2*l1**2*l2**2*(m1+m2*(np.sin(th1-th2))**2))
    return c1, c2

def pstar(th1, th2, dth1, dth2):
    c1 = -(m1+m2)*g*l1*np.sin(th1)-m2*l1*l2*dth1*dth2*np.sin(th1-th2)
    c2 = m2*l1*l2*dth1*dth2*np.sin(th1-th2)-m2*g*l2*np.sin(th2)
    return c1, c2    


#Def Euler avant 
def Euler(th0_1, th0_2, p0_1, p0_2, k, tmax):
    
    N = int(tmax/k)
    t = np.linspace(0, tmax, N+1)
    sol_th = np.zeros((2,N+1))
    sol_p = np.zeros((2,N+1))
    sol_th[0,0] = th0_1
    sol_th[1,0] = th0_2
    sol_p[0,0] = p0_1
    sol_p[1,0] = p0_2

    for i in range(N):
        F1, F2 = thstar(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])
        sol_th[0,i+1] = sol_th[0,i] + k*F1
        sol_th[1,i+1] = sol_th[1,i] + k*F2
        F3, F4 = pstar(sol_th[0,i], sol_th[1,i], F1, F2)
        sol_p[0,i+1] = sol_p[0,i] + k*F3
        sol_p[1,i+1] = sol_p[1,i] + k*F4
    return t, sol_th, sol_p

#Def Range-Kuta 4
def RK4(th0_1, th0_2, p0_1, p0_2, k, tmax):

    
    N = int(tmax/k)
    t = np.linspace(0, tmax, N+1)
    sol_th = np.zeros((2,N+1))
    sol_p = np.zeros((2,N+1))
    sol_th[0,0] = th0_1
    sol_th[1,0] = th0_2
    sol_p[0,0] = p0_1
    sol_p[1,0] = p0_2

    for i in range(N):
        
        F1, F2 = thstar(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])
        
        k11,k21 = thstar(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])
        k12,k22 = thstar(sol_th[0,i]+(k11/2), sol_th[1,i]+(k21/2), sol_p[0,i]+(k11/2), sol_p[1,i]+(k21/2))
        k13,k23 = thstar(sol_th[0,i]+(k12/2), sol_th[1,i]+(k22/2), sol_p[0,i]+(k12/2), sol_p[1,i]+(k22/2))
        k14,k24 = thstar(sol_th[0,i]+k12, sol_th[1,i]+k22, sol_p[0,i]+k12, sol_p[1,i]+k22)
        
        H11, H21 = k*k11, k*k21
        H12, H22 = k*k12, k*k22
        H13, H23 = k*k13, k*k23
        H14, H24 = k*k14, k*k24
        
        sol_th[0,i+1] = sol_th[0,i] + k(k11+(2*k12)+(2*k13)+k14)/6
        sol_th[1,i+1] = sol_th[1,i] + (k21+(2*k22)+(2*k23)+k24)/6
        
        Q11,Q21 = pstar(sol_th[0,i], sol_th[1,i], F1, F2)
        Q12,Q22 = pstar(sol_th[0,i]+(Q11/2), sol_th[1,i]+(Q21/2), F1+(Q11/2), F2+(Q21/2))
        Q13,Q23 = pstar(sol_th[0,i]+(Q12/2), sol_th[1,i]+(Q22/2), F1+(Q12/2), F2+(Q22/2))
        Q14,Q24 = pstar(sol_th[0,i]+Q12, sol_th[1,i]+Q22, F1+Q12, F2+Q22)
        
        q11, q21 = k*Q11, k*Q21
        q12, q22 = k*Q12, k*Q22
        q13, q23 = k*Q13, k*Q23
        q14, q24 = k*Q14, k*Q24
        
        sol_p[0,i+1] = sol_p[0,i] + k*(q11+(2*q12)+(2*q13)+q14)/6
        sol_p[1,i+1] = sol_p[1,i] + k*(q21+(2*q22)+(2*q23)+q24)/6
    return t, sol_th, sol_p


###################################
##### TOUT A REFAIRE
###################################
#Def de F dans la méthode de Newton-Raphson
def denth0_1(th1,th2):
    denominateur = m2*l1**2*l2**2*(m1+m2*np.sin(th1-th2)**2)
    return denominateur
def denth0_2(th1,th2):
    denominateur = l1**2*l2**2*m2*(m2*np.sin(th1-th2)**2+m1)
    return denominateur
def denp_1(th1,th2):
    denominateur = m2*l1**2*l2**2*(m1+m2*np.sin(th1-th2)**2)
    return denominateur
def denp_2(th1, th2):
    denominateur = m2*l1**2*l2**2*(m1+m2*np.sin(th1-th2)**2)
    return denominateur
##########
#Debut Useless
def fdf(th1,th2,p1,p2):
    deno1 = m2*l1*l2*p2*np.sin(th1-th2)*denth0_1(th1,th2)+2*m2**3*l1**3*l2**3*p2*np.cos(th1-th2)**2*np.sin(th1-th2)
    deno2 = (((m1+m2)*l1**2*p2-m2*l2*l1*p1*np.cos(th1-th2))*denth0_2(th1,th2))*2*m2**2*l1**2*l2**2*np.sin(th1-th2)*np.cos(th1-th2)-m2*l1*l2*p1*np.sin(th1-th2)*denth0_2(th1,th2)
    c1 = (m2*l2**2*p1-m2*l1*l2*p2*np.cos(th1-th2))*(denth0_1(th1,th2))/deno1
    c2 = ((m1+m2)*l1**2*p2-m2*l2*l1*p1*np.cos(th1-th2))*denth0_2(th1,th2)/deno2
    
    return c1,c2
    
def fdfd(th1,th2,p1,p2):
    c3 = l2**2*p1-l1*l2*np.cos(th1-th2)*p2/l2**2
    c4 = (m1+m2)*l1**2*p2-m2*l1*l2*np.cos(th1-th2)*p1/(m1+m2)*l1**2
    return c3,c4
l = l1*l2
#####Nouvelle définition de Runge-Kutta 4
def qp(q1,q2,p1,p2):
    den = m1+m2*np.sin(q1-q2)**2 
    c1 = (l2*p1-l1*p2*np.cos(q1-q2)/(l1**2*l2*(m1+m2*np.sin(q1-q2)**2))) 
    c2 = (l2*(m1+m2)*p2-l2*m2*p1*np.cos(q1-q2))/(l2**2*l1*den)
    return c1,c2
def pp(q1,q2,p1,p2):
    den = m1+m2*np.sin(q1-q2)**2 
    try:
       
        C1 = (p1*p2*m2*np.sin(q1-q2))/(l1*l2*(m1+m2*np.sin(q1-q2)**2))
        C2 = (np.sin(2*(q1-q2))/2*l1**2*l2**2*den**2)*(l1**2*p2**2*(m1+m2)+l2**2*p1**2*m2-m2*l1*l2*p1*p2*np.cos(q1-q2))  
        c1 = -(m1+m2)*g*l1*np.sin(q1)+ C2 - C1
        c2 = -m2*g*l2*np.sin(q2) + C1 - C2
        return c1,c2
    except FloatingPointError as err:
        print(err)
        #print(C1, 'C1')
        #print(C2, 'C2')
        print(q1, 'q1')
        print(q2, 'q2')
        print(p1, 'p1')
        print('p2', p2)
        exit(0)
def Q(q1, q2, p1, p2):
    Q1, Q2 = qp(q1,q2,p1,p2)
    Q = np.array((Q1, Q2))
    
    return Q
def P(q1,q2,p1,p2):
    P1, P2 = pp(q1,q2,p1,p2)
    P = np.array((P1 ,P2))
    
    return P
def RK(q1,q2,p1,p2, k, tmax):
    N = int(tmax/k)
    t = np.linspace(0, tmax, N+1)
    sol_th = np.zeros((2,N+1))
    sol_p = np.zeros((2,N+1))
    sol_th[0,0] = q1
    sol_th[1,0] = q2
    sol_p[0,0] = p1
    sol_p[1,0] = p2
    #den = m1+m2*np.sin(q1-q2)**2
    #sol = np.array((sol_th,sol_p))
    for i in range(N):
        qq1=Q(sol_th[0,i],sol_th[1,i],sol_p[0,i],sol_p[1,i])
        k1 = k*qq1[0]
        k11 = k*qq1[1]
        k2, k21 = k*Q(sol_th[0,i]+(k1/2),sol_th[1,i]+(k1/2),sol_p[0,i]+(k1/2),sol_p[1,i]+(k1/2))[0], k*Q(sol_th[0,i]+(k11/2),sol_th[1,i]+(k11/2),sol_p[0,i]+(k11/2),sol_p[1,i]+(k11/2))[1]
        k3, k31 = k*Q(sol_th[0,i]+(k2/2),sol_th[1,i]+(k2/2),sol_p[0,i]+(k2/2),sol_p[1,i]+(k2/2))[0], k*Q(sol_th[0,i]+(k21/2),sol_th[1,i]+(k21/2),sol_p[0,i]+(k21/2),sol_p[1,i]+(k21/2))[1]
        k4, k41 = k*Q(sol_th[0,i]+(k3/2),sol_th[1,i]+(k3/2),sol_p[0,i]+(k3/2),sol_p[1,i]+(k3/2))[0], k*Q(sol_th[0,i]+(k31/2),sol_th[1,i]+(k31/2),sol_p[0,i]+(k31/2),sol_p[1,i]+(k31/2))[1]
        sol_th[0,i+1],sol_th[1,i+1] = sol_th[0,i] + (1/6) * (k1+(2*k2)+(2*k3)+k4), sol_th[1,i] + (1/6) * (k11 + (2 * k21) + (2 * k31) + k41)
        k5, k51 = k*P(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])[0], k*P(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])[1]
        k6, k61 = k*P(sol_th[0,i]+(k5/2), sol_th[1,i]+(k5/2), sol_p[0,i]+(k5/2), sol_p[1,i]+(k5/2))[0], k*P(sol_th[0,i]+(k51/2), sol_th[1,i]+(k51/2), sol_p[0,i]+(k51/2), sol_p[1,i]+(k51/2))[1]
        k7, k71 = k*P(sol_th[0,i]+(k6/2),sol_th[1,i]+(k6/2),sol_p[0,i]+(k6/2),sol_p[1,i]+(k6/2))[0], k*P(sol_th[0,i]+(k61/2),sol_th[1,i]+(k61/2),sol_p[0,i]+(k61/2),sol_p[1,i]+(k61/2))[1]
        k8, k81 = k*P(sol_th[0,i]+(k7/2),sol_th[1,i]+(k7/2),sol_p[0,i]+(k7/2),sol_p[1,i]+(k7/2))[0], k*P(sol_th[0,i]+(k71/2),sol_th[1,i]+(k71/2),sol_p[0,i]+(k71/2),sol_p[1,i]+(k71/2))[1]
        sol_p[0,i+1],sol_p[1,i+1] = sol_p[0,i] + (1/6) * (k5+(2*k6)+(2*k7)+k8), sol_p[1,i] + (1/6) * (k51 + (2 * k61) + (2 * k71) + k81)
        
    return t, sol_th, sol_p

### Méthode de Newton EPISODE 3 PRISE 1
######## Apparement juste capable de trouver les pos d'equilibre


def Jacobien(q1,q2,p1,p2):
    den = m1+m2*np.sin(q1-q2)**2
    J = np.zeros((4,4))
    dth1th1 = (1/l)*(p2*np.sin(q1-q2)*(m1+m2*np.sin(q1-q2)**2)+p2*np.cos(q1-q2)*(2*m2*np.sin(q1-q2)*np.cos(q1-q2))/den**2)
    dth1th2 = (1/l)*(((2*m2*p2*np.sin(q1-q2)*np.cos(q1-q2)**2)/den**2)-p2*np.sin(q1-q2)/den)
    dth1p2 = (1/l)*(-np.cos(q1-q2)/den)
    dth1p1 = 1/(l1**2*(m1+m2*np.sin(q1-q2)**2))
    J[0,0] = dth1th1
    J[0,1] = dth1th2
    J[0,2] = dth1p1
    J[0,3] = dth1p2
    dth2th1 = (1/l)*(m2*p1*np.sin(q1-q2)*(m1+m2*np.sin(q1-q2)**2)+2*m2**2*p1*np.sin(q1-q2)*np.cos(q1-q2)**2)/den**2
    dth2th2 = (1/l)*(1/den**2)*(-2*l1*m2*p1*np.sin(q1-q2)*np.cos(q1-q2)**2-m2*p1*np.sin(q1-q2)*(m1+m2*np.sin(q1-q2)**2))
    dth2p1 = (1/l)*(1/den)*(-m2*np.cos(q1-q2))
    dth2p2 = (1/l)*(1/den)*(m1+m2)
    J[1,0],J[1,1], J[1,2], J[1,3] = dth2th1, dth2th2, dth2p1, dth2p2
    dc1q1 = ((m2*np.cos(q1-q2))/(l1*l2*(m1+m2*np.sin(q1-q2)**2)))*(p1*p2-(2*m2*np.sin(q1-q2)**2)/(m1+m2*np.sin(q1-q2)**2))
    dc1q2 = ((p1*p2*m2)/(l*den**2))*(2*m2*np.cos(q1-q2)*np.sin(q1-q2)**2-np.cos(q1-q2)*den)
    dc1p1 = (1/l*den)*p2*m2*np.sin(q1-q2)
    dc1p2 = (1/l*den)*p1*m2*np.sin(q1-q2)
    dc2q1 = m2*p1*p2*np.sin(q1-q2)*np.sin(2*(q1-q2))/(2*l1*l2*(m2*np.sin(q1-q2)**2+m1)) - (2*m2*np.cos(q1-q2)*(-l*m2*p1*p2*np.cos(q1-q2)+l1**2*(m2+m1)*p2**2+l2**2*m2*p1**2)*np.sin(q1-q2)*np.sin(2*(q1-q2)))/(l**2*den**3) + (-l*m2*p1*p2*np.cos(q1-q2)+l1**2*(m1+m2)*p2**2+l2**2*m2*p1**2)*np.cos(2*(q1-q2))/(l*den**2)
    dc2q2 = m2*p2*p1*np.sin(2*(q1-q2))*np.sin(q2-q1)-(np.cos(2*(q1-q2))*(-l*m2*p1*p2*np.cos(q2-q1)+l1**2*(m2+m1)*p2**2)+l2**2*m2*p1**2)/(l**2*den**2)- (2*m2*np.sin(2*(q1-q2)*np.cos(q2-q1))*(-l*m2*p1*p2*np.cos(q2-q1)+l1**2*(m2+m1)*p2**2)+l2**2*m2*p1**2)*np.sin(q2-q1)/(l**2*den**3)
    dc2p1 = m2*np.sin(2*(q1-q2))*(2*l2*p1-l1*p2*np.cos(q2-q1))/(2*l1**2*l2*den**2)
    dc2p2 = (m1+m2)*np.sin(2*(q1-q2))*(2*l1*p2-l1*p1*np.cos(q2-q1))/(2*l2**2*l1*den**2)  
    dp1q1 = -(m1+m2)*g*l1*np.cos(q1)- dc1q1+ dc2q1
    dp1q2 = dc2q2 - dc1q2
    dp1p1 = dc2p1 - dc1p1
    dp1p2 = dc2p2 - dc1p2
    dp2q1 = - dc2q1+ dc1q1
    dp2q2 = -m2*g*l2*np.cos(q2)-  dc1q2 - dc2q2
    dp2p1 = dc1p1 - dc2p1
    dp2p2 = dc1p2 - dc2p2

    J[2,0],J[2,1], J[2,2], J[2,3] = dp1q1, dp1q2, dp1p1, dp1p2
    J[3,0],J[3,1], J[3,2], J[3,3] = dp2q1, dp2q2, dp2p1, dp2p2
    try:
        J_inv = np.linalg.inv(J)
        #vp = np.linalg.eigvals(J)
        return J_inv
    except np.linalg.LinAlgError as err:
        print("Error : {}".format(err))
        print(J)
        #print(dth1th1,dth2th1,dp1q1,dp2q1)
        print(q1,q2,p1,p2,den)
        exit(0)

    #return vp
# def qp(q1,q2,p1,p2):
#     den = m1+m2*np.sin(q1-q2)**2 
#     C1 = (p1*p2*m2*np.sin(q1-q2)/(l1*l2*(m1+m2*np.sin(q1-q2)**2)))
#     C2 = (np.sin(2*(q1-q2))/2*l1**2*l2**2*den**2)*(l1**2*p2**2*(m1+m2)+l2**2*p1**2*m2-m2*l1*l2*p1*p2*np.cos(q1-q2))  
#     c1 = (l2*p1-l1*p2*np.cos(q1-q2)/(l1**2*l2*(m1+m2*np.sin(q1-q2)**2)))
#     c2 = (l2*(m1+m2)*p2-l2*m2*p1*np.cos(q1-q2))/(l2**2*l1*den)
#     return c1,c2
# def pp(q1,q2,p1,p2):
#     den = m1+m2*np.sin(q1-q2)**2 
#     try:
#         C1 = (p1*p2*m2*np.sin(q1-q2)/(l1*l2*(m1+m2*np.sin(q1-q2)**2)))
#         C2 = (np.sin(2*(q1-q2))/2*l1**2*l2**2*den**2)*(l1**2*p2**2*(m1+m2)+l2**2*p1**2*m2-m2*l1*l2*p1*p2*np.cos(q1-q2))  
#     c1 = -(m1+m2)*g*l1*np.sin(q1)+ C2 - C1
#     c2 = -m2*g*l2*np.sin(q2) + C1 - C2
    # return c1,c2
def Newton(th0_1, th0_2, p0_1, p0_2, k, tmax):
    N = int(tmax/k)
    t = np.linspace(0, tmax, N+1)
    sol_th = np.zeros((2,N+1))
    sol_p = np.zeros((2,N+1))
    sol_th[0,0] = th0_1
    sol_th[1,0] = th0_2
    sol_p[0,0] = p0_1
    sol_p[1,0] = p0_2

    for i in range(N):
        F1, F2 = qp(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])
        F3, F4 = pp(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])
        F = np.array([F1,F2,F3,F4])
        #sol_th[0,i+1] = sol_th[0,i] - np.dot(Jacobien(th0_1,th0_2,p0_1,p0_2),F)
        jacob=Jacobien(sol_th[0,i], sol_th[1,i], sol_p[0,i], sol_p[1,i])
        
        sol_th[0,i+1] = sol_th[0,i] - jacob[0,0]*F1 - jacob[0,1]*F2 - jacob[0,2]*F3 - jacob[0,3]*F4
        sol_th[1,i+1] = sol_th[1,i] - jacob[1,0]*F1 - jacob[1,1]*F2 - jacob[1,2]*F3 - jacob[1,3]*F4
        sol_p[0,i+1]  = sol_p[0,i]  - jacob[2,0]*F1 - jacob[2,1]*F2 - jacob[2,2]*F3 - jacob[2,3]*F4
        sol_p[1,i+1]  = sol_p[1,i]  - jacob[3,0]*F1 - jacob[3,1]*F2 - jacob[3,2]*F3 - jacob[3,3]*F4
        #print(sol_th[:4], sol_p[:4])
    return t, sol_th, sol_p



# t, sol_th, sol_p = Euler(th0_1, th0_2, p0_1, p0_2, k, tmax)
# t, sol_th1 ,sol_p1 = Euler(th0_1+0.01,th0_2+0.01, p0_1,p0_2,k,tmax)
#NR
t, sol_th, sol_p = RK4(th0_1, th0_2, p0_1, p0_2, k, tmax)
t, sol_th1 ,sol_p1 = RK4(th0_1+0.01,th0_2+0.01, p0_1+0.01,p0_2+0.01,k,tmax)


### Ne marche pas avec RK4
# t, sol_th, sol_p = RK4(th0_1, th0_2, p0_1, p0_2, k, tmax)
# t, sol_th1 ,sol_p1 = RK4(th0_1+0.01,th0_2+0.01, p0_1+0.01,p0_2+0.01,k,tmax)

#position des pendules
x1 = l1*np.sin(sol_th[0,:])
y1 = -l1*np.cos(sol_th[0,:])
x2 = x1 + l2*np.sin(sol_th[1,:])
y2 = y1 - l2*np.cos(sol_th[1,:])

x11 = l1*np.sin(sol_th1[0,:])
y11 = -l1*np.cos(sol_th1[0,:])
x21 = x11 + l2*np.sin(sol_th1[1,:])
y21 = y11 - l2*np.cos(sol_th1[1,:])

pos1 = x1 + y1
pos2 = x2 + y2

#Vitesses des masses:
def derivee(x, t):
    d = []
    for i in range(0, len(x)-1):
        dt = t[i+1]-t[i]
        dx = x[i+1]-x[i]
        d.append(dx/dt)
    return d    

v1 = derivee(pos1, t)
v2 = derivee(pos2, t)


fig = plt.figure(figsize=(5, 4))
ax = fig.add_subplot(autoscale_on=False, xlim=(-L, L), ylim=(-L, 1.))
ax.set_aspect('equal')
ax.grid()

line, = ax.plot([], [], 'o-', lw=2)
line2, = ax.plot([], [], 'o-', lw=2)
trace, = ax.plot([], [], '.-', lw=1, ms=0.2)
trace2, = ax.plot([], [], '.-', lw=1, ms=0.2)
time_template = 'time = %.1fs'
time_text = ax.text(0.05, 0.9, '', transform=ax.transAxes)
history_x, history_y = deque(maxlen=history_len), deque(maxlen=history_len)
history_xx, history_yy = deque(maxlen=history_len), deque(maxlen=history_len)

# animation
def animate(i):
    thisx = [0, x1[i], x2[i]]
    thisy = [0, y1[i], y2[i]]
    thisxx = [0, x11[i], x21[i]]
    thisyy = [0, y11[i], y21[i]]


    if i == 0 : 
        history_x.clear()
        history_y.clear()
        history_xx.clear()
        history_yy.clear()

    history_x.appendleft(thisx[2])
    history_y.appendleft(thisy[2])
    history_xx.appendleft(thisxx[2])
    history_yy.appendleft(thisyy[2])
    line.set_data(thisx, thisy)
    line2.set_data(thisxx,thisyy)
    trace.set_data(history_x, history_y)
    trace2.set_data(history_xx, history_yy)
    time_text.set_text(time_template % (i*k))
    return line, line2, time_text, trace, trace2
    #return line, time_text, trace

ani = animation.FuncAnimation(
    fig, animate,int(tmax*fps), interval=k*1000, blit=True) 
ani.save('double_pendulum.mp4', fps=fps)
plt.show()
plt.close()

#Energie
def Energie_calc(p,g,m,h):
    return((p*p)/(2*m)- m*g*h) #((m*(v*v))/2 + m*g*h) 

E1 = Energie_calc(sol_p[0,:],g,m1,y1)
E2 = Energie_calc(sol_p[0,:],g,m2,y2)
E = E1 +E2
fig, ax2=plt.subplots()
#ax2.plot(t, E1, label = 'E1')
#ax2.plot(t,E2, label = 'E2')
ax2.plot(t, E, label = 'E1+E2')
plt.xlabel('temps')
plt.ylabel('Energie')
plt.title("Energie")
plt.legend()
plt.show()


